# Demo configuration for all the options involved in configuring queues/exchanges/channels
# and connections
amqp:
  baseConnection:
    live:               &@connLive

      # a list of hosts where we can connect. We allow list of hosts because
      # if we do not have a loadbalancer/haproxy we can at least try to randomly
      # pick a host to connect
      host:             [localhost]

      # the port to be used. We assume that for every host, the port is the same
      port:             5672

      # the username to be used for operations
      login:            admin

      # the password for the user to be used for operations
      password:         admin

      # the virtual host on which the operations need to be happening
      vhost:            /

      # timeout for incoming activity. seconds, may be fractional
      readTimeout:      100.3

      # timeout for outgoing activity. seconds, may be fractional
      writeTimeout:     100

      # timeout for connecting. seconds, may be fractional
      connectTimeout:   100

  baseChannel:
    base:               &@channBase

      # the number of messages we can prefetch from the broker and hold in local cache
      count:            100

      # the total size of messages we can prefetch from the broker and hold in the local cache
      # the number is expressed in bytes
      size:             100

      # identifies whether we are operating on a transactional channel
      transactional:    true

      # identifies the connection we have to use for opening up the channel
      connection:       live

  baseExchange:
    base:               &@durableExchange

      # the flags that we can use for declaring the current exchange
      # currently supported: AMQP_DURABLE, AMQP_PASSIVE
      flags:            [AMQP_DURABLE]

      # the name of the channel that w can use for the exchange
      # the name as to be defined soewhere in the current file configuration
      channel:          base-non-di

      # the type of the exchange
      # currently supported: AMQP_EX_TYPE_DIRECT, AMQP_EX_TYPE_FANOUT,
      # AMQP_EX_TYPE_HEADERS, AMQP_EX_TYPE_TOPIC
      type:             AMQP_EX_TYPE_TOPIC

      # the default exchange is super useful in rpc communication. Marking
      # the exchange as defaultdoes two things: the exchange is no longer declared
      # and no other properties except the channel are required since this exchange
      # is nameless
      # @see http://www.rabbitmq.com/tutorials/tutorial-six-python.html
      isDefault:        true

      # a specific rabbitmq extension of the AMQP protocol called alternate-exchanges
      # @see http://www.rabbitmq.com/ae.html
      ae:               some-test-exchange

      # additional arguments used when declaring the exchange. they have absolutely no
      # meaning, but they can be used for various indicators
      # any kind of argument is allowed inside the list
      arguments:
        test:           test1
        test2:          test2

      # the name of the queue
      name:
        # the physical name, the method name or the function name which can return
        # the name of the exchange
        name:           lala

        # since sometimes it is required to have the exchange name based on some localized
        # parameters like hostname and so on, this identifies the class to which @name
        # method belongs to
        # the cases in which we need to use this feature are for example fanout exchanges
        # with unknown number of listeners
        class:          \SomeClass

        # identifies how to extract the name for the current exchange.
        # currently supports:
        # constant = @name contains the exact name of the queue
        # static = @name is a static method defined on @class
        # dynamic = @name is a regular method defined on @class instance
        # function = @name is an available function to be called to return the name
        type:           function

      # rabbitmq extension to the AMQP protocol allowing binding of exchanges
      # to other exchanges
      bindings:
        -
          # the name of the exchange to bind to
          # ATTENTION!!! This is the physical name of the exchange we will use for the bind. This is not the exchange
          # declaration block from the configuration
          exchange:   test

          # the routing key used to dispatch the messages from the binded exchange
          routingKey: testtest

          # a list of arguments that can be used when binding the exchange to
          # another exchange
          arguments:
            arg1:     lala
            arg2:     lala2

      # declare the current dependencies for the exchange
      # useful in the moment we need to declare the dependencies when initialising the exchange
      dependencies:

        # exchange dependencies
        exchange:
          - test

  baseQueue:
    base:               &@durableQueue

      # the flags we can use when declaring the queue
      # the supported flags are: AMQP_DURABLE, AMQP_PASSIVE
      # AMQP_EXCLUSIVE and AMQP_AUTODELETE
      # this field is a bitmask of the desired flags
      flags:            [AMQP_DURABLE]

      # arguments to be used when declaring the queue
      # most of the arguments are rabbitmq extensions to the AMQP protocol
      arguments:

        # the messages ttl on queue. The value is in miliseconds
        # @see
        # @see http://www.rabbitmq.com/ttl.html
        message_ttl:    60000

        # the amount of time the queue expires after there has been no operation
        # on it
        # @see http://www.rabbitmq.com/ttl.html
        expires:        60000

        # dead letter exchange. This allows messages rejected, expired or that have reached
        # the limit of the queue to be routed on different exchange where they can be
        # reprocessed
        # @see http://www.rabbitmq.com/dlx.html
        dl_exchange:    exchange-name

        # can be used in combination with the dl-exchange above
        # specifies a routing key to be used when message is dead-lettered
        # @see http://www.rabbitmq.com/dlx.html
        dl_routingKey:  some-routing-key

        # allows setting a maximum length for how many messages can a queue
        # hold.
        # @see http://www.rabbitmq.com/maxlength.html
        max_length:     100

        # part of the same length restrictioning as max-length, except it applies on
        # the size of the message instead of on number of messages
        # @see http://www.rabbitmq.com/maxlength.html
        max_bytes:      1000

      # the name of the queue
      name:
        # the physical name, the method name or the function name which can return
        # the name of the queue
        name:           lala

        # since sometimes it is required to have the queue name based on some localized
        # parameters like hostname and so on, this identifies the class to which @name
        # method belongs to
        # the cases in which we need to use this feature are for example fanout exchanges
        # with unknown number of listeners
        class:          \SomeClass

        # identifies how to extract the name for the current queue.
        # currently supports:
        # constant = @name contains the exact name of the queue
        # static = @name is a static method defined on @class
        # dynamic = @name is a regular method defined on @class instance
        # function = @name is an available function to be called to return the name
        type:           function

      # binding of queues to exchanges
      bindings:
        -
          # the name of the exchange to bind to
          exchange:   test

          # the routing key used to receive messages on the current queue
          routingKey: testtest

          # a list of arguments that can be used when binding
          arguments:
            arg1:     lala
            arg2:     lala2

      # the name of the channel that w can use for the exchange
      # the name as to be defined soewhere in the current file configuration
      channel:          base-non-di

      # declare the dependencies for the current queue
      # a queue can have dependencies on a specific exchange (for bindings foe example)
      # as well as on a queue: for example if the queue has a dead-letter-exchange property
      dependencies:

        # the queue dependencies
        queue:
          - test

        # the exchange dependencies
        exchange:
          - test
